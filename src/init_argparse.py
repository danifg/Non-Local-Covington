def init_argparse(parser):
    parser.add_argument('conll_file', help="Input CoNLL file to train or evaluate on")
    parser.add_argument('--seq_file', help="Oracle sequence for the parser", default=None, type=str)
    parser.add_argument('--wordvec_file', help="File to read pretrained word vectors from", default=None, type=str)
    parser.add_argument('--wordvec_dim', help="Dimensionality of word embeddings to be used", default=100, type=int)
    parser.add_argument('--vocab_file', help="File to save/read vocabulary to/from", default=None, type=str)
    parser.add_argument('--debug', help='Print debug outputs', default=False, action='store_true')
    parser.add_argument('--hidden_size', help='Number of hidden units in RNN', default=400, type=int)
    parser.add_argument('--layers', help='Number of layers in POS-RNN', default=2, type=int)
    parser.add_argument('--layers2', help='Number of layers in Parse-RNN', default=2, type=int)
    parser.add_argument('--batch_size', help='Minibatch size used in SGD', default=32, type=int)
    parser.add_argument('--mappings_file', help='File storing mappings from dependency relations and POS tags to integers', default='mappings.txt', type=str)
    parser.add_argument('--dense_layers', help='Comma-separated sizes of dense layers following the Parse-BiLSTM; default "100"', default='100', type=str)
    parser.add_argument('--pos_dense_layers', help='Comma-separated sizes of dense layers following the POS-BiLSTM; default "100"', default='100', type=str)
    parser.add_argument('--feat_file', help="Files containing featurized examples", default=None, type=str)
    parser.add_argument('--rel_emb_dim', help="Dimensionality of relation embeddings to be used", default=32, type=int)
    parser.add_argument('--pos_emb_dim', help="Dimensionality of POS tag embeddings to be used", default=32, type=int)
    parser.add_argument('--epochs', help='Number of epochs to run', default=10, type=int)
    parser.add_argument('--lr', help='Learning rate', default=0.001, type=float)
    parser.add_argument('--beta2', help='Beta2 in ADAM', default=0.9, type=float)
    parser.add_argument('--opt', help='Optimizer to use (default "adam")', default="adam", type=str)
    parser.add_argument('--model_dir', help="Directory to save model files in", default='.', type=str)
    parser.add_argument('--min_count', help='Minimum occurences in the training set for a word to be kept in the vocabulary', default=3, type=int)
    parser.add_argument('--keep_prob', help='Probability of keeping activation in dropout', default=0.95, type=float)
    parser.add_argument('--combination', help='How vectors are combined; default "biaffine"', default="biaffine", choices=["affine", "bilinear", "biaffine"])
    parser.add_argument('--transsys', type=str, choices=['Cov', 'NCov', 'Cov2', 'Cov3'], help="Transition system to use", default="Cov")
    parser.add_argument('--eval_dataset', type=str, choices=['train', 'dev', 'test'], help="Dataset evaluating on", default="dev")
    parser.add_argument('--pos_mult', help='Multiplier for the POS loss', default=1.0, type=float)
    parser.add_argument('--word_dropout', help='Word dropout probability', default=0.1, type=float)
    parser.add_argument('--beam_size', help='Beam size used during evaluation', default=1, type=int)
    parser.add_argument('--anneal', help='Anneal learning rate after this epoch', default=5, type=int)
    parser.add_argument('--epoch_multiplier', help='Stretch out training for smaller datasets', default=1, type=float)
    parser.add_argument('--fpos', help='Use fine-grained POS for training', default=False, action='store_true')
    parser.add_argument('--no_pos', help='Disable multitask learning with POS tagging being the second task, and use gold POS inputs', default=False, action='store_true')
