
#Usage trainL.sh Cov ba
path=diskT/
model=$1$2
transys=$1
lang=$2


mkdir ${path}${model}_models

DIR=${path}${model}_models

train=${path}treebanks/${2}-train.conll
test=${path}treebanks/${2}-test.conll
mapping=${path}treebanks/mappings-${2}.txt
sec=$DIR/train.${model}.seq
embs=${path}embs/emb-${2}.vec
vocab=$DIR/vocab-${2}.pickle
feats=$DIR/${model}_feats.pickle

result=results/system_pred_${model}.conllx

iter=10
iterm1=9

#rm ${path}treebanks/${model}_feats.pickle

CO=coa
TR=train
TE=test

if [ $CO = "co" ]; then
./test_oracle.sh $train $transys $mapping 
fi


if [ $TR = "train" ]; then
	#mkdir ${path}${model}_models
	#./create_mappings.sh $train > $mapping
	python gen_oracle_seq.py  $train $sec --transsys ${transys} --mappings $mapping

	python train_parser.py $train --seq_file $sec --wordvec_dim 300 --wordvec_file $embs --vocab_file $vocab  --feat_file $feats --model_dir ${path}${model}_models --transsys $transys --mappings_file $mapping --epochs $iter

fi

if [ $TE = "test" ]; then
	python eval_parser.py $test --vocab_file $vocab --model_dir ${path}${model}_models --transsys $transys --eval_dataset test --mappings_file $mapping --epochs 15
fi

cut -f1-6 $test | paste - ${path}${model}_models/test_eval_beam_1_output_epoch${iterm1}.txt > $result

echo 'CONLL Eval'
python eval.py -g $test -s $result -language conll -p

#echo 'PTB Eval'
#python eval.py -g ptb3-wsj-test.conllx -s system_pred_${model}.conllx
